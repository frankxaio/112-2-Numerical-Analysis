clc;
clear;

A = [13.422, 0 , 0 , 0;
    -13.422, 12.252, 0 0;
    0, -12.252, 12.377, 0
    0, 0, -12.377, 11.797];

% b: loadings of chloride to each of the four laker
b = [750.5; 300; 102; 30];

% c: the resulting chloride concentrations in each of the four lakes


%% a)
fprintf("a) Use the matrix inverse to solve for the concentrations in each of the four lakes. \n");

% print the matrix
fprintf('A = \n');
for i = 1:size(A, 1)
    for j = 1:size(A, 2)
        fprintf(' %8.3f ', A(i, j));
    end
    fprintf('\n');
end

fprintf('B= \n');
for i = 1:size(b, 1)
    fprintf('    %-8.3f\n', b(i));
end

A_inv = inv(A);
fprintf('A_inv = \n');
for i = 1:size(A_inv, 1)
    for j = 1:size(A_inv, 2)
        fprintf(' %8.4f ', A_inv(i, j));
    end
    fprintf('\n');
end

c = A_inv * b;
fprintf('c = \n');
for i = 1:size(c, 1)
    fprintf('    %-8.3f\n', c(i));
end

%% b)
fprintf("b) HOW much must the loading to Lake Powell be reduced for the Chloride concentration of Lake Havasu to be 75? \n");
% c4 100.237 --> 75, b1 --> ? 
% c = A_inv * b
% c4 = A_inv(4, :) * b
syms x;
b_new = [x; 300; 102; 30];
c_new = [c(1); c(2); c(3); 75];
delta_c = c_new - c;
delta_b = b_new - b;

fprintf('delta_b = \n');
disp(delta_b)

fprintf('delta_c = \n');
for i = 1:size(delta_c, 1)
    fprintf('    %-8.3f\n', delta_c(i));
end

% 先算出後來的值
eqn = delta_c(4) == A_inv(4) * delta_b(1) ;
sol = solve(eqn, x);
b_new(1) = sol;

% 再算出減少的量
eqn = b(1) - x == b_new(1);
sol = solve(eqn, x);
fprintf('sol = %.2f\n', sol);

%% c)
fprintf("c) Using the column-sum norm, compute the condition number and how many suspect digits would be generated by solving this system.\n");
% column sum norm:
% 1. 將每一 row 的值除所有 column 的最大值得到 norm matrix 
% 2. column sum norm = norm matrix 將 column 值取絕對值並加總，並選出最大值
% condition number = norm(A) * norm(A_inv)

% norm A 
column_abs_max = max(abs(A), [], 1);
% disp(column_abs_max);
B = A./max(column_abs_max);
column_sum_norm = max(sum(abs(B), 1));
fprintf("column_sum_norm = %.3f\n", column_sum_norm);

% norm A_inv, 就是取 B 的 inverse
B_inv = inv(B);
column_sum_norm_inv = max(sum(abs(B_inv), 1));
fprintf("column_sum_norm_inv = %.3f\n", column_sum_norm_inv);

condition_num = column_sum_norm * column_sum_norm_inv;
fprintf("condition_num = %.3f\n", condition_num);

% suspect digits
suspect_digits = max(log10(condition_num), 1);
fprintf("suspect_digits = %.3f\n", suspect_digits);



% B = abs(A)/column_sum_max
